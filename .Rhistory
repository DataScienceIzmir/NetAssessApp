plot(x = 0.5, y = 0.5, col = "white", axes = FALSE)
text(x = 0.5, y = 0.5, labels = "No data avaialable")
plot(x = 0.5, y = 0.5, col = "white", axes = FALSE, axes.labels = FALSE)
plot(x = 0.5, y = 0.5, col = "white", axes = FALSE, x.lab = "", y.lab = "")
plot(x = 0.5, y = 0.5, col = "white", axes = FALSE, xlab = "", ylab = "")
text(x = 0.5, y = 0.5, labels = "No data avaialable")
shiny::runApp()
shiny::runApp()
q
q
x
shiny::runApp(launch.browser = FALSE)
readings <- r
parameter <- "88101"
shiny::runApp(launch.browser = FALSE)
sites <- aSites
readings <- r
parameter <- "88101"
parameter %in% c(44201, 88101, 88502) & length(sites) > 1
data <- readings[readings$Site_Key %in% sites, ]
x <- cormat(data, parameter)
unique(data$Monitor$Key)
unique(data$Monitor_Key)
parameter %in% c(44201, 88101, 88502) & length(unique(data$Monitor_Key)) > 1
shiny::runApp(launch.browser = FALSE)
shinyapps::configureApp("NetAssessApp", size = "large", instances = 4)
install.packages("shinyapps")
install.packages("shinyapps")
devtools:install_github("rstudio/shinyapps")
devtools::install_github("rstudio/shinyapps")
configureApp("NetAssessApp", instances = 2)
shinyapps::configureApp("NetAssessApp", instances = 2)
shinyapps::configureApp("NetAssessApp", size = "large")
shinyapps::configureApp("NetAssessApp", size = "large")
shinyapps::deployApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
sN <- d[[1]]
sites.deldir <- d[[2]]
combos <- d[[3]]
aS <- d[[4]]
site <- aS[[1]]
site.data <- data[data$Site_Key == site, c("Date", "Value")]
shiny::runApp()
sN <- d[[1]]
sites.deldir <- d[[2]]
combos <- d[[3]]
aS <- d[[4]]
data <- d[[5]]
site <- aS[[1]
]
site.data <- data[data$Site_Key == site, c("Date", "Value")]
View(site.data)
start.date <- min(site.data$Date)
end.date <- max(site.data$Date)
neighbors <- combos[combos$ind1 == site | combos$ind2 == site, ]
View(neighbors)
View(neighbors)
neighbors$Site_Key <- apply(neighbors, 1, function(r) {if(r['ind1'] == site) {return(r['ind2'])} else {return(r['ind1'])}})
View(neighbors)
neighbors <- neighbors[, c("Site_Key", "dist")]
View(neighbors)
neigh.data <- data[data$Site_Key %in% neighbors$Site_Key, c("Site_Key", "Date", "Value")]
neigh.data <- merge(neigh.data, neighbors, by = "Site_Key", all = TRUE)
View(neigh.data)
neigh.data <- neigh.data[neigh.data$Date %in% site.data$Date, ]
values <- as.matrix(dcast(neigh.data, Date~Site_Key, value.var = "Value", fun.aggregate = mean))
rownames(values) <- values[,1]
values <- values[, -1]
weights <- dcast(neigh.data, Date~Site_Key, value.var = "dist", fun.aggregate = mean)
rownames(weights) <- weights[,1]
weights <- weights[, -1]
weights <- 1/(weights^2)
values[is.na(values)] = 0
weights[is.na(weights)] = 0
# multiply the values and weights matrices and calculate inner product using
# a vector of ones to get the sums for each row
summed <- (values * weights) %*% rep(1, dim(values)[2])
# calculate the sum of each row in the
denom <- weights %*% rep(1, dim(values)[2])
# if the denom vector has zeros, remove that index from denom and summed
rn <- rownames(summed)
summed <- summed[denom != 0]
denom <- denom[denom != 0]
# calculate inverse distance squared weighted average for each day
weighted.avg <- summed / denom
weighted.avg <- data.frame(Date = rn, Est = weighted.avg)
# get the daily values for the monitor of interest as a vector
daily <- merge(site.data, weighted.avg, by ="Date")
# calculate difference between each interpolated value and the actual
# value for the monitor
daily$diff <- daily$Est - daily$Value
x <- daily$Value != 0
relDiff <- round(100 * (daily$diff[x]/daily$Value[x]))
daily$diff <- signif(daily$diff, 3)
shiny::runApp()
site = aS[[2]]
site.data <- data[data$Site_Key == site, c("Date", "Value")]
start.date <- min(site.data$Date)
end.date <- max(site.data$Date)
neighbors <- combos[combos$ind1 == site | combos$ind2 == site, ]
neighbors$Site_Key <- apply(neighbors, 1, function(r) {if(r['ind1'] == site) {return(r['ind2'])} else {return(r['ind1'])}})
neighbors <- neighbors[, c("Site_Key", "dist")]
neigh.data <- data[data$Site_Key %in% neighbors$Site_Key, c("Site_Key", "Date", "Value")]
neigh.data <- merge(neigh.data, neighbors, by = "Site_Key", all = TRUE)
neigh.data <- neigh.data[neigh.data$Date %in% site.data$Date, ]
values <- as.matrix(dcast(neigh.data, Date~Site_Key, value.var = "Value", fun.aggregate = mean))
rownames(values) <- values[,1]
values <- values[, -1]
weights <- dcast(neigh.data, Date~Site_Key, value.var = "dist", fun.aggregate = mean)
rownames(weights) <- weights[,1]
weights <- weights[, -1]
weights <- 1/(weights^2)
values[is.na(values)] = 0
weights[is.na(weights)] = 0
# multiply the values and weights matrices and calculate inner product using
# a vector of ones to get the sums for each row
summed <- (values * weights) %*% rep(1, dim(values)[2])
# calculate the sum of each row in the
denom <- weights %*% rep(1, dim(values)[2])
# if the denom vector has zeros, remove that index from denom and summed
rn <- rownames(summed)
summed <- summed[denom != 0]
denom <- denom[denom != 0]
# calculate inverse distance squared weighted average for each day
weighted.avg <- summed / denom
weighted.avg <- data.frame(Date = rn, Est = weighted.avg)
# get the daily values for the monitor of interest as a vector
daily <- merge(site.data, weighted.avg, by ="Date")
# calculate difference between each interpolated value and the actual
# value for the monitor
daily$diff <- daily$Est - daily$Value
x <- daily$Value != 0
relDiff <- round(100 * (daily$diff[x]/daily$Value[x]))
daily$diff <- signif(daily$diff, 3)
data.frame(Key = site, bias_mean = round(mean(daily$diff), 4), bias_min = min(daily$diff),
bias_max = max(daily$diff), bias_sd = sd(daily$diff), bias_n = nrow(neighbors),
relbias_mean = round(mean(relDiff)), relbias_min = min(relDiff),
relbias_max = max(relDiff), start_date = start.date, end_date = end.date)
sites = aS[[3]]
site.data <- data[data$Site_Key == site, c("Date", "Value")]
start.date <- min(site.data$Date)
end.date <- max(site.data$Date)
neighbors <- combos[combos$ind1 == site | combos$ind2 == site, ]
neighbors$Site_Key <- apply(neighbors, 1, function(r) {if(r['ind1'] == site) {return(r['ind2'])} else {return(r['ind1'])}})
neighbors <- neighbors[, c("Site_Key", "dist")]
neigh.data <- data[data$Site_Key %in% neighbors$Site_Key, c("Site_Key", "Date", "Value")]
neigh.data <- merge(neigh.data, neighbors, by = "Site_Key", all = TRUE)
neigh.data <- neigh.data[neigh.data$Date %in% site.data$Date, ]
site = aS[[4]]
start.date <- min(site.data$Date)
end.date <- max(site.data$Date)
neighbors <- combos[combos$ind1 == site | combos$ind2 == site, ]
neighbors$Site_Key <- apply(neighbors, 1, function(r) {if(r['ind1'] == site) {return(r['ind2'])} else {return(r['ind1'])}})
neighbors <- neighbors[, c("Site_Key", "dist")]
neigh.data <- data[data$Site_Key %in% neighbors$Site_Key, c("Site_Key", "Date", "Value")]
neigh.data <- merge(neigh.data, neighbors, by = "Site_Key", all = TRUE)
neigh.data <- neigh.data[neigh.data$Date %in% site.data$Date, ]
site = aS[[5]]
start.date <- min(site.data$Date)
end.date <- max(site.data$Date)
neighbors <- combos[combos$ind1 == site | combos$ind2 == site, ]
neighbors$Site_Key <- apply(neighbors, 1, function(r) {if(r['ind1'] == site) {return(r['ind2'])} else {return(r['ind1'])}})
neighbors <- neighbors[, c("Site_Key", "dist")]
neigh.data <- data[data$Site_Key %in% neighbors$Site_Key, c("Site_Key", "Date", "Value")]
neigh.data <- merge(neigh.data, neighbors, by = "Site_Key", all = TRUE)
neigh.data <- neigh.data[neigh.data$Date %in% site.data$Date, ]
site = aS[[6]]
start.date <- min(site.data$Date)
end.date <- max(site.data$Date)
neighbors <- combos[combos$ind1 == site | combos$ind2 == site, ]
neighbors$Site_Key <- apply(neighbors, 1, function(r) {if(r['ind1'] == site) {return(r['ind2'])} else {return(r['ind1'])}})
neighbors <- neighbors[, c("Site_Key", "dist")]
neigh.data <- data[data$Site_Key %in% neighbors$Site_Key, c("Site_Key", "Date", "Value")]
neigh.data <- merge(neigh.data, neighbors, by = "Site_Key", all = TRUE)
neigh.data <- neigh.data[neigh.data$Date %in% site.data$Date, ]
site = aS[[7]]
start.date <- min(site.data$Date)
end.date <- max(site.data$Date)
neighbors <- combos[combos$ind1 == site | combos$ind2 == site, ]
neighbors$Site_Key <- apply(neighbors, 1, function(r) {if(r['ind1'] == site) {return(r['ind2'])} else {return(r['ind1'])}})
neighbors <- neighbors[, c("Site_Key", "dist")]
neigh.data <- data[data$Site_Key %in% neighbors$Site_Key, c("Site_Key", "Date", "Value")]
neigh.data <- merge(neigh.data, neighbors, by = "Site_Key", all = TRUE)
neigh.data <- neigh.data[neigh.data$Date %in% site.data$Date, ]
site = aS[[8]]
start.date <- min(site.data$Date)
end.date <- max(site.data$Date)
neighbors <- combos[combos$ind1 == site | combos$ind2 == site, ]
neighbors$Site_Key <- apply(neighbors, 1, function(r) {if(r['ind1'] == site) {return(r['ind2'])} else {return(r['ind1'])}})
neighbors <- neighbors[, c("Site_Key", "dist")]
neigh.data <- data[data$Site_Key %in% neighbors$Site_Key, c("Site_Key", "Date", "Value")]
neigh.data <- merge(neigh.data, neighbors, by = "Site_Key", all = TRUE)
neigh.data <- neigh.data[neigh.data$Date %in% site.data$Date, ]
site = aS[[9]]
start.date <- min(site.data$Date)
end.date <- max(site.data$Date)
neighbors <- combos[combos$ind1 == site | combos$ind2 == site, ]
neighbors$Site_Key <- apply(neighbors, 1, function(r) {if(r['ind1'] == site) {return(r['ind2'])} else {return(r['ind1'])}})
neighbors <- neighbors[, c("Site_Key", "dist")]
neigh.data <- data[data$Site_Key %in% neighbors$Site_Key, c("Site_Key", "Date", "Value")]
neigh.data <- merge(neigh.data, neighbors, by = "Site_Key", all = TRUE)
neigh.data <- neigh.data[neigh.data$Date %in% site.data$Date, ]
site = aS[[10]]
start.date <- min(site.data$Date)
end.date <- max(site.data$Date)
neighbors <- combos[combos$ind1 == site | combos$ind2 == site, ]
neighbors$Site_Key <- apply(neighbors, 1, function(r) {if(r['ind1'] == site) {return(r['ind2'])} else {return(r['ind1'])}})
neighbors <- neighbors[, c("Site_Key", "dist")]
neigh.data <- data[data$Site_Key %in% neighbors$Site_Key, c("Site_Key", "Date", "Value")]
neigh.data <- merge(neigh.data, neighbors, by = "Site_Key", all = TRUE)
neigh.data <- neigh.data[neigh.data$Date %in% site.data$Date, ]
site = aS[[11]]
start.date <- min(site.data$Date)
end.date <- max(site.data$Date)
neighbors <- combos[combos$ind1 == site | combos$ind2 == site, ]
neighbors$Site_Key <- apply(neighbors, 1, function(r) {if(r['ind1'] == site) {return(r['ind2'])} else {return(r['ind1'])}})
neighbors <- neighbors[, c("Site_Key", "dist")]
neigh.data <- data[data$Site_Key %in% neighbors$Site_Key, c("Site_Key", "Date", "Value")]
neigh.data <- merge(neigh.data, neighbors, by = "Site_Key", all = TRUE)
neigh.data <- neigh.data[neigh.data$Date %in% site.data$Date, ]
View(neighbors)
sN <- sN[sN$Key %in% data$Site_Key, ]
shiny::runApp()
sN = d[[1]]
sites.deldir = d[[2]]
combos = d[[3]]
a = d[[4]]
data = d[[5]]
site = [[1]]
site = a[[1]]
a
View(sN)
site = a[[1]]
site.data <- data[data$Site_Key == site, c("Date", "Value")]
start.date <- min(site.data$Date)
end.date <- max(site.data$Date)
neighbors <- combos[combos$ind1 == site | combos$ind2 == site, ]
neighbors$Site_Key <- apply(neighbors, 1, function(r) {if(r['ind1'] == site) {return(r['ind2'])} else {return(r['ind1'])}})
neighbors <- neighbors[, c("Site_Key", "dist")]
neigh.data <- data[data$Site_Key %in% neighbors$Site_Key, c("Site_Key", "Date", "Value")]
neigh.data <- merge(neigh.data, neighbors, by = "Site_Key", all = TRUE)
neigh.data <- neigh.data[neigh.data$Date %in% site.data$Date, ]
View(neighbors)
site = a[2]
site.data <- data[data$Site_Key == site, c("Date", "Value")]
if(nrow(site.data) > 0) {
start.date <- min(site.data$Date)
end.date <- max(site.data$Date)
neighbors <- combos[combos$ind1 == site | combos$ind2 == site, ]
neighbors$Site_Key <- apply(neighbors, 1, function(r) {if(r['ind1'] == site) {return(r['ind2'])} else {return(r['ind1'])}})
neighbors <- neighbors[, c("Site_Key", "dist")]
neigh.data <- data[data$Site_Key %in% neighbors$Site_Key, c("Site_Key", "Date", "Value")]
neigh.data <- merge(neigh.data, neighbors, by = "Site_Key", all = TRUE)
neigh.data <- neigh.data[neigh.data$Date %in% site.data$Date, ]
} else {
print("No Data")
}
site.data <- data[data$Site_Key == site, c("Date", "Value")]
if(nrow(site.data) > 0) {
start.date <- min(site.data$Date)
end.date <- max(site.data$Date)
neighbors <- combos[combos$ind1 == site | combos$ind2 == site, ]
neighbors$Site_Key <- apply(neighbors, 1, function(r) {if(r['ind1'] == site) {return(r['ind2'])} else {return(r['ind1'])}})
neighbors <- neighbors[, c("Site_Key", "dist")]
neigh.data <- data[data$Site_Key %in% neighbors$Site_Key, c("Site_Key", "Date", "Value")]
neigh.data <- merge(neigh.data, neighbors, by = "Site_Key", all = TRUE)
neigh.data <- neigh.data[neigh.data$Date %in% site.data$Date, ]
print(nrow(neighbors))
} else {
print("No Data")
}
site = a[3]
site.data <- data[data$Site_Key == site, c("Date", "Value")]
if(nrow(site.data) > 0) {
start.date <- min(site.data$Date)
end.date <- max(site.data$Date)
neighbors <- combos[combos$ind1 == site | combos$ind2 == site, ]
neighbors$Site_Key <- apply(neighbors, 1, function(r) {if(r['ind1'] == site) {return(r['ind2'])} else {return(r['ind1'])}})
neighbors <- neighbors[, c("Site_Key", "dist")]
neigh.data <- data[data$Site_Key %in% neighbors$Site_Key, c("Site_Key", "Date", "Value")]
neigh.data <- merge(neigh.data, neighbors, by = "Site_Key", all = TRUE)
neigh.data <- neigh.data[neigh.data$Date %in% site.data$Date, ]
print(nrow(neighbors))
} else {
print("No Data")
}
View(neighbors)
View(data[data$Site_Key == 2025, ])
View(unique(data[, c("Site_Key", "State_Code", "County_Code", "Site_ID")]))
shiny::runApp()
shiny::runApp()
parameter = "88101"
chart_label <- switch(as.character(parameter),
"44201" = "8-Hour Daily Max Ozone Correlation Matrix",
"88101" = "Daily PM2.5 FRM/FEM (88101) Correlation Matrix",
"88502" = "Daily PM2.5 Non-FEM (88502) Correlation Matrix")
d <- data[order(data$Site_Key), ]
site.info <- unique(d[, c("Site_Key", "State_Code", "County_Code", "Site_ID")])
site.info$id <- sprintf("%02i-%03i-%04i", site.info$State_Code, site.info$County_Code, site.info$Site_ID)
sites <- unique(d$Site_Key) #create list of unique AQSIDs
k <- 1
tot <- length(sites) - 1
results_table <- data.frame() #create empty data frame
for(i in seq(tot)) {
for(j in seq(i+1, length(sites))) {
sub_data=subset(d,d$Site_Key==sites[i] | d$Site_Key==sites[j])
c1 <- c(sub_data$Latitude[sub_data$Site_Key == sites[i]][1], sub_data$Longitude[sub_data$Site_Key == sites[i]][1])
c2 <- c(sub_data$Latitude[sub_data$Site_Key == sites[j]][1], sub_data$Longitude[sub_data$Site_Key == sites[j]][1])
distance.km <- round(earth.dist(c1[2], c1[1], c2[2], c2[1]),0)
results <- list()
sub_data=dcast(sub_data,sub_data$Date~sub_data$Site_Key, fun.aggregate=mean, value.var = "Value")
results$site1 <- sites[i]
results$site2 <- sites[j]
results$cor <- round(cor(sub_data[2],sub_data[3],use="pairwise.complete.obs",method="pearson"),3)
results$com <- sum(complete.cases(sub_data))
results$dif <- mean((abs(sub_data[,2]-sub_data[,3]))/((sub_data[,2]+sub_data[,3])/2), na.rm = TRUE)
results$dis <- round(earth.dist(c1[2], c1[1], c2[2], c2[1]),0)
results_table <- rbind(results_table, results)
}
}
View(results_table)
makeMatrix <- function(df, site.info) {
val <- colnames(df)[!colnames(df) %in% c("site1", "site2")]
cast <- dcast(df, site2~site1, fun.aggregate=mean, value.var = val)
rownames(cast) <- sapply(cast$site2, function(key) {site.info$id[site.info$Site_Key == key]})
cast <- cast[,2:ncol(cast)]
colnames(cast) <- sapply(colnames(cast), function(key) {site.info$id[site.info$Site_Key == key]})
as.matrix(cast)
}
cormatData <- results_table
cor <- makeMatrix(cormatData[, c("site1", "site2", "cor")], site.info)
View(cor)
site.info$id[site.info$id == results_table$site1]
sapply(results_table$site1, function(site) {site.info$id[site.info$Site_Key == site]})
s <- function() {
return(1)
return(2)
}
s()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runif(1,1,10000)
library("shiny", lib.loc="C:/Program Files/R/R-3.1.2/library")
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
validate
stopWithCondition
shiny:::stopWithCondition
?stop
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
param = "42401"
dbListTables(db)
dbReadTable(db, "crit_lu")
dbReadTable(db, "dv")
dbReadTable(db, "dv") -> x
View(x)
View(x[grep("so*", x$POLLUTANT), ])
x[grep("so*", x$POLLUTANT), "POLLUTANT"] <- "so2"
View(x[grep("so*", x$POLLUTANT), ])
View(x)
dbWriteTable(db, "dv", x, overwrite = TRUE)
dbSendQuery(db, "VACUUM")
y <- dbReadTable(db, "crit_lu")
View(y)
shiny::runApp()
View(x)
site <- 39
param = 88101
dv <- dbGetQuery(db, paste0("SELECT dv.*, crit_lu.NAME, naaqs.STANDARD, naaqs.UNITS FROM dv JOIN crit_lu ON dv.POLLUTANT = crit_lu.CODE JOIN naaqs ON dv.DURATION = naaqs.DURATION AND dv.POLLUTANT = naaqs.POLLUTANT WHERE crit_lu.PARAMETER = ", param, " AND dv.Key = ", site))
z <- dbReadTable(db, "naaqs")
View(z)
z[z$POLLUTANT == "pm25", "POLLUTANT"]
z[z$POLLUTANT == "pm25", "POLLUTANT"] = "pm2.5"
View(z)
dbWriteTable(db, "naaqs", z)
dbWriteTable(db, "naaqs", z, overwrite = TRUE)
shiny::runApp()
dv <- dbGetQuery(db, paste0("SELECT dv.*, crit_lu.NAME, naaqs.STANDARD, naaqs.UNITS FROM dv JOIN crit_lu ON dv.POLLUTANT = crit_lu.CODE JOIN naaqs ON dv.DURATION = naaqs.DURATION AND dv.POLLUTANT = naaqs.POLLUTANT WHERE crit_lu.PARAMETER = ", param, " AND dv.Key = ", site))
View(y)
View(z)
View(y)
View(x)
View(x)
View(z)
dv <- dbGetQuery(db, paste0("SELECT dv.*, crit_lu.NAME, naaqs.STANDARD, naaqs.UNITS FROM dv JOIN crit_lu ON dv.POLLUTANT = crit_lu.CODE JOIN naaqs ON dv.DURATION = naaqs.DURATION AND dv.POLLUTANT = naaqs.POLLUTANT WHERE crit_lu.PARAMETER = ", param, " AND dv.Key = ", site))
dv <- dbGetQuery(db, paste0("SELECT dv.*, crit_lu.NAME, naaqs.STANDARD, naaqs.UNITS FROM dv JOIN crit_lu ON dv.POLLUTANT = crit_lu.CODE JOIN naaqs ON dv.DURATION = naaqs.DURATION AND dv.POLLUTANT = naaqs.POLLUTANT WHERE crit_lu.PARAMETER = ", param, " AND dv.Key = ", site))
dv <- dbGetQuery(db, paste0("SELECT dv.*, crit_lu.NAME, naaqs.STANDARD, naaqs.UNITS FROM dv JOIN crit_lu ON dv.POLLUTANT = crit_lu.CODE JOIN naaqs ON dv.DURATION = naaqs.DURATION AND dv.POLLUTANT = naaqs.POLLUTANT))
)
crit_lu <- dbReadTable(db, "crit_lu")
dvalue <- dbReadTable(db, "dv")
naaqs <- dbReadTable(db, "naaqs")
crit_lu <- dbReadTable(db, "crit_lu")
dvalue <- dbReadTable(db, "dv")
naaqs <- dbReadTable(db, "naaqs")
View(crit_lu)
View(dataf)
View(dvalue)
View(naaqs)
shiny::runApp()
naaqs <- dbReadTable(db, "naaqs")
View(naaqs)
dbListTables(db)
naaqs[naaqs$POLLUTANT == "pm25", "POLLUTANT"] = "pm2.5"
View(naaqs)
dbWriteTable(db, "naaqs", naaqs, overwrite = TRUE)
naaqs <- dbReadTable(db, "naaqs")
View(naaqs)
dbSendQuery(db, "VACUUM")
shiny::runApp()
units <- expression(paste(mu*g/m^3))
units
eval(units)
x <- "This is a sentence"
deparse(x)
?expression
shiny::runApp()
y <- deparse(x)
class(x)
class(y)
shiny::runApp()
site = 39
param = 88101
dv <- dbGetQuery(db, paste0("SELECT dv.*, crit_lu.NAME, naaqs.STANDARD, naaqs.UNITS FROM dv JOIN crit_lu ON dv.POLLUTANT = crit_lu.CODE JOIN naaqs ON dv.DURATION = naaqs.DURATION AND dv.POLLUTANT = naaqs.POLLUTANT WHERE crit_lu.PARAMETER = ", param, " AND dv.Key = ", site))
values$trendChart <- paste0("images/temp/trend", as.integer(runif(1,1,1000000)), ".png")
pol <- dv$NAME[1]
pol <- gsub("<sub>", "[", pol, fixed = TRUE)
pol <- gsub("</sub>", "]", pol, fixed = TRUE)
site <- sprintf("%02i-%03i-%04i", dv$STATE_CODE, dv$COUNTY_CODE, dv$SITE_ID)[1]
units <- dv$UNITS[1]
if(units == "ugm3") {
units <- quote(paste(mu*g/m^3))
}
class(units)
dv <- dv[, c("DURATION", "STANDARD", "DV_2004", "DV_2005", "DV_2006", "DV_2007", "DV_2008", "DV_2009", "DV_2010", "DV_2011", "DV_2012", "DV_2013")]
dv <- melt(dv)
std <- dv[dv$variable == "STANDARD", c("DURATION", "value")]
colnames(std) <- c("DURATION", "STANDARD")
dv <- dv[dv$variable != "STANDARD", ]
colnames(dv) <- c("DURATION", "LABEL", "DV")
dv <- merge(dv, std, by = "DURATION")
dv$LABEL <- as.numeric(substr(as.character(dv$LABEL), 4, 7))
dv$SNAME <- paste(dv$DURATION, "Standard")
dv$DURATION <- paste(dv$DURATION, "Design Value")
cbPalette <- c("#E69F00", "#D55E00", "#56B4E9", "#0072B2")
pol <- quote(pol)
pol <- dv$NAME[1]
pol <- "PM<sub>2.5</sub>"
pol <- gsub("<sub>", "[", pol, fixed = TRUE)
pol <- gsub("</sub>", "]", pol, fixed = TRUE)
p2 <- quote(deparse(pol))
p2 <- deparse(pol)
expression(p2)
p2 <- expression(ps)
p2 <- deparse(pol)
p2 <- expression(p2)
p2
yaxis <- expression(paste(Design Value (, mu*g/m^3, )))
yaxis <- expression(paste("Design Value (", mu*g/m^3, ")"))
shiny::runApp()
View(naaqs)
site = 39
dv <- dbGetQuery(db, paste0("SELECT dv.*, crit_lu.NAME, naaqs.STANDARD, naaqs.UNITS FROM dv JOIN crit_lu ON dv.POLLUTANT = crit_lu.CODE JOIN naaqs ON dv.DURATION = naaqs.DURATION AND dv.POLLUTANT = naaqs.POLLUTANT WHERE crit_lu.PARAMETER = ", param, " AND dv.Key = ", site))
pol <- dv$NAME[1]
clu <- dbReadTable(db, "crit_lu")
View(clu)
shiny::runApp()
shiny::runApp()
shinyapps::deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shinyapps:deployApp()
shinyapps::deployApp()
shiny::runApp()
