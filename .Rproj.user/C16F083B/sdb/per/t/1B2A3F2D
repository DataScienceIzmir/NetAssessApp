{
    "contents" : "voronoi <- function(ids, lats, longs, boundary) {\n\n  # Create a dataframe from the user's inputs\n  df <- cbind(ids, lats, longs)\n  # Create a SpatialPointsDataFrame\n  points <- SpatialPointsDataFrame(list(longs, lats), data.frame(ids))\n  # Extract the coordinates from the SpatialPointsDataFrame\n  crds <- coordinates(points)\n  # If a boundary files was provided, use that to calculate a bounding box when\n  # calculating the voronoi polygons vertices\n  if(!missing(boundary)) {\n    bb <- bbox(boundary)\n    bb2 <- bbox(points)\n    bb[1,1] <- min(bb[1,1], bb2[1,1])\n    bb[2,1] <- min(bb[2,1], bb2[2,1])\n    bb[1,2] <- max(bb[1,2], bb2[1,2])\n    bb[2,2] <- max(bb[2,2], bb2[2,2])\n    rw <- as.numeric(t(bb))\n    z <- deldir(crds[,1], crds[,2], rw=rw)\n  } else {\n    z <- deldir(crds[,1], crds[,2])\n  }\n  # Create a list of the voronoi polygons, the create and empty vector 'poly'\n  # of same length to store new polygons\n  w <- tile.list(z)\n  polys <- vector(mode=\"list\", length=length(w))\n  # Loop through the list, w, creating polygon objects for each in the poly\n  # vector\n  for(i in seq(along = polys)) {\n    pcrds <- cbind(w[[i]]$x, w[[i]]$y)\n    pcrds <- rbind(pcrds, pcrds[1, ])\n    polys[[i]] <- Polygons(list(Polygon(pcrds)), ID=ids[i])\n  }\n  # Create a SpatialPolygons Object to store the new polygons\n  SP <- SpatialPolygons(polys)\n  # If a boundary file was provided, perform a final clip to that boundary file\n  # NOTE: This can be slow, and appears to be the biggest bottleneck in the\n  # script.\n  if(!missing(boundary)) SP <- gIntersection(SP, boundary, byid = TRUE)\n  # Use the SP object to create a SpatialPolygonsDataFrame that has the polygons\n  # plus additional information like the the monitor id.\n  pid <- sapply(slot(SP, \"polygons\"), function(x) slot(x, \"ID\"))\n  pid2 <- as.numeric(sapply(pid, function(x) unlist(strsplit(x, \" \"))[1]))\n  points <- points[points$ids %in% pid2, ]\n  crds <- coordinates(points)\n  voronoi <- SpatialPolygonsDataFrame(SP, data=data.frame(pnt_x=crds[,1],\n                                                          pnt_y = crds[,2], id = pid2, row.names=pid, stringsAsFactors = FALSE))\n  # Return the SpatialPolygonsDataFrameObject\n  return(voronoi)\n}",
    "created" : 1423066595701.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "2882215419",
    "id" : "1B2A3F2D",
    "lastKnownWriteTime" : 1418067035,
    "path" : "C:/R/NetAssessApp/R/voronoi.R",
    "project_path" : "R/voronoi.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}