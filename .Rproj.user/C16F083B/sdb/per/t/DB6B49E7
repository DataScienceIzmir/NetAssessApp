{
    "contents" : "cormatData <- function(data) {\n   \n  d <- data[order(data$Site_Key), ]\n  site.info <- unique(d[, c(\"Site_Key\", \"State_Code\", \"County_Code\", \"Site_ID\")])\n  site.info$id <- sprintf(\"%02i-%03i-%04i\", site.info$State_Code, site.info$County_Code, site.info$Site_ID)\n  sites <- unique(d$Site_Key) #create list of unique AQSIDs\n  k <- 1\n  tot <- length(sites) - 1\n\n  results_table <- data.frame() #create empty data frame\n  for(i in seq(tot)) {\n    for(j in seq(i+1, length(sites))) {\n      sub_data=subset(d,d$Site_Key==sites[i] | d$Site_Key==sites[j])\n      c1 <- c(sub_data$Latitude[sub_data$Site_Key == sites[i]][1], sub_data$Longitude[sub_data$Site_Key == sites[i]][1])\n      c2 <- c(sub_data$Latitude[sub_data$Site_Key == sites[j]][1], sub_data$Longitude[sub_data$Site_Key == sites[j]][1])\n      distance.km <- round(earth.dist(c1[2], c1[1], c2[2], c2[1]),0)\n      results <- list()\n      sub_data=dcast(sub_data,sub_data$Date~sub_data$Site_Key, fun.aggregate=mean, value.var = \"Value\")\n      results$key1 <- sites[i]\n      results$key2 <- sites[j]\n      results$cor <- round(cor(sub_data[2],sub_data[3],use=\"pairwise.complete.obs\",method=\"pearson\"),3)\n      results$com <- sum(complete.cases(sub_data))\n      results$dif <- signif(mean((abs(sub_data[,2]-sub_data[,3]))/((sub_data[,2]+sub_data[,3])/2), na.rm = TRUE), 3)\n      results$dis <- round(earth.dist(c1[2], c1[1], c2[2], c2[1]), 0)\n      results_table <- rbind(results_table, results)\n    }\n  }\n\n  results_table$site1 = sapply(results_table$key1, function(site) {site.info$id[site.info$Site_Key == site]})\n  results_table$site2 = sapply(results_table$key2, function(site) {site.info$id[site.info$Site_Key == site]})\n  \n  return(results_table)\n  \n}\n  \ncormatChart <- function(cormat_data, parameter, pmType) {\n  \n  chart_label <- switch(as.character(parameter),\n                        \"44201\" = \"8-Hour Daily Max Ozone Correlation Matrix\",\n                        \"88101\" = \"\",\n                        \"88502\" = \"Daily PM2.5 Non-FEM (88502) Correlation Matrix\")\n  \n  if(parameter == \"88101\") {\n    chart_label <- switch(as.character(pmType),\n                          \"fem\" = \"Daily PM2.5 FEM Only (88101) Correlation Matrix\",\n                          \"frm\" = \"Daily PM2.5 FRM Only (88101) Correlation Matrix\",\n                          \"both\" = \"Daily PM2.5 FRM/FEM (88101) Correlation Matrix\")\n  }\n  \n  makeMatrix <- function(df) {\n    val <- colnames(df)[!colnames(df) %in% c(\"site1\", \"site2\")]\n    cast <- dcast(df, site2~site1, fun.aggregate=mean, value.var = val)\n    rownames(cast) <- cast$site2\n    cast <- cast[,2:ncol(cast)]\n    as.matrix(cast)\n  }\n  \n  # Create the matrices\n  cor <- makeMatrix(cormat_data[, c(\"site1\", \"site2\", \"cor\")])\n  dif <- makeMatrix(cormat_data[, c(\"site1\", \"site2\", \"dif\")])\n  dis <- t(makeMatrix(cormat_data[, c(\"site1\", \"site2\", \"dis\")]))\n  dis[lower.tri(dis)] <- \"\"  \n  dis[is.nan(dis)] == \"\"\n  \n  # colfunc=colorRampPalette(c(\"white\",\"yellow\",\"orange\",\"red\",\"purple\"))(11)\n  colfunc <- c(\"#FFFFFF\", \"#FFFF99\", \"#FFFF32\", \"#FFEC00\", \"#FFC900\", \"#FFA500\",\n               \"#FF6200\", \"#FF2000\", \"#EB0630\", \"#C51390\", \"#A020F0\")\n  #Create color palette that runs from 0 to 1.1 and apply it to average abs.diferrence results\n  dif <- matrix(cut(dif,breaks=seq(from=0,to=1.1,by=.1),labels=colfunc,include.lowest=TRUE,right=TRUE),\n                nrow = nrow(cor), dimnames = list(rownames(cor), colnames(cor)))\n  \n  #Set up screens for layout\n  split.screen(rbind(c(0,.9,0,1),c(.9,1,0.1,.5),c(.9,1,.55,.8),c(0,1,0,.1)))\n  \n  #Plot correlation matrix: width of ellipse=pearson corr;color=average absolute difference; number=distance in KM\n  screen(1)\n  par(plt=c(0,0.8,0,1),new=TRUE)\n  plotcorr(cor,type=\"lower\",col=dif,diag=TRUE,cex.lab=2, cex.main = 2.5, mar=c(3,0,3,1),outline=TRUE, main=paste(chart_label,\"- All Valid Pairs\"))\n  text(expand.grid(y=seq(nrow(dis)),x=seq(nrow(dis), 1)),labels=dis,font=2,cex=1.5,col=\"blue\",srt=45)\n  \n  #Plot ellipse legend\n  screen(2)\n  par(plt=c(.9,1,0.1,.5),new=TRUE)\n  y=0.1\n  x=0.15\n  #  corrlist=(c(1.0,0.8,0.6,0.4,0.2,0))\n  corrlist=seq(0, 1, by = 0.2)\n  \n  subplot(plot(ellipse(1), axes = FALSE, type=\"l\",xlab=\"\",ylab=\"\", col = \"white\"), x=x, y=y, size=c(0.1,0.1)) #Something is not working with the first ellipse - it is plotting in the wrong position\n  \n  for (i in corrlist) {\n    subplot(plot(ellipse(i), axes = FALSE, type=\"l\",xlab=\"\",ylab=\"\"), x=x, y=y, size=c(.2,.2)) #Something is not working with the first ellipse - it is plotting in the wrong position\n    text(x=x+.15, y = y, labels = as.character(i), cex=1.5)\n    y=y+.15\n  }  \n  \n  text(x=.05,y=.15,adj=0,labels=\"Pearson Correlation (r)\",cex=1.5,srt=90)\n  \n  #Plot avg relative difference legend\n  screen(3)\n  par(plt=c(.9,1,.6,1),new=TRUE)\n  gradient.rect(.1,0,.2,.9,nslices=10,col=colfunc,gradient=\"Y\")\n  text(x=.3, y=seq(from=0, to=.8 ,by=.16), labels = c(seq(from=0,to=1,by=.2)),cex=1.5)       \n  text(x =0.05, y=0,adj=0,labels=\"Average Relative Difference\",srt=90,cex=1.5)\n  \n  #Paste note on distance values\n  screen(4)\n  par(plt=c(0,1,0,.1),new=TRUE)\n  text(x=.2,y=.5,labels=\"values in ellipse = distance in kilometers\",col=\"blue\", cex=2.5,mar=c(0,0,0,0))\n  \n  close.screen(all.screens=TRUE)\n  \n}",
    "created" : 1429298357052.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "2566987911",
    "id" : "DB6B49E7",
    "lastKnownWriteTime" : 1426271549,
    "path" : "C:/R/NetAssessApp/R/cormatdb.R",
    "project_path" : "R/cormatdb.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}