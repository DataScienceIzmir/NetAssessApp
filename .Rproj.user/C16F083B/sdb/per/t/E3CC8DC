{
    "contents" : "L.SiteGroup = L.FeatureGroup.extend({\n  options: {\n    visibleSites: [],\n    selectedSites: [],\n    activeSites: [],\n    aoiLayer: null,\n    correlations: false,\n    visibilityTest: function(site) {return false;},\n    styles: {unselected: {radius: 4, opacity: 0.67, fillOpacity: 0.67, fillColor: \"#800000\", color: \"#000\", weight: 1},\n             selected: {radius: 5, opacity: 0.67, fillOpacity: 0.67, fillColor: \"#ff4040\", color: \"#000\", weight: 1}\n    },\n    contextmenu: false\n  },\n  initialize: function(options) {\n    \n    L.setOptions(this, options);\n    \n    this._layers = {};\n    \n    if(this.options.aoiLayer !== undefined) {\n      this.setAOI(this.options.aoiLayer)\n    }\n    \n    this.on(\"siteupdate\", function(event) {\n      \n      var keys = event.site.properties.key,\n          type = event.updateType;\n      \n      if(type === \"select\" || type === \"deselect\") {\n        this.fire(\"selectionupdate\", {keys: this.options.selectedSites});\n      } else if(type === \"show\" || type === \"hide\") {\n        this.fire(\"visibilityupdate\", {keys: this.options.visibleSites});\n      }    \n\n    })\n        \n  },\n  getSite: function(key) {\n    \n    var site;\n    \n    for(var k = 0; k < key.length; k++) {\n      this.eachLayer(function(layer) {\n        if(layer.properties.key.indexOf(key[k]) != -1) {\n          site = layer;\n        }\n      })\n    }\n\n    return site;    \n    \n  },\n  setAOI: function(aoiLayer) {\n    this.options.aoiLayer = aoiLayer;\n    \n    var siteGroup = this;\n    this.options.aoiLayer.on(\"layeradd\", function(e) {\n      siteGroup.checkAOI();\n    })\n      \n  },\n  addGeoJSON: function(geojson) {\n    var features = L.Util.isArray(geojson) ? geojson : geojson.features\n    var feature, latlng, options;\n    \n    for(var i = 0; i < features.length; i++) {\n\n      var options = {}\n    \n      feature = features[i];\n      latlng = L.latLng(feature.geometry.coordinates[1],\n                        feature.geometry.coordinates[0]);\n      this._addSite(latlng, feature.properties, options, false);\n      \n      this.fire(\"visibilityupdate\", {keys: this.options.visibleSites})\n      this.fire(\"selectionupdate\", {keys: this.options.selectedSites})\n            \n    }\n    \n    this.setVisibleSites();\n    \n    return this;\n    \n  },\n  _addSite: function(latlng, properties, options) {\n    if(options == undefined) {\n      options = {};\n    }\n    var site = L.siteMarker(latlng, options, properties, this); \n    return site;\n  },\n  addSite: function(latlng, properties, options) {\n    var site = this._addSite(latlng, properties, options);\n    this.fire(\"visibilityupdate\", {keys: this.options.visibleSites})\n    this.fire(\"selectionupdate\", {keys: this.options.selectedSites})\n  },\n  testVisibility: function() {\n    \n    var group = this;\n    \n    this.eachLayer(function(site) {\n      \n      if(group.options.visibilityTest(site)) {\n        site._show();\n      } else {\n        site._hide();\n      }\n            \n    })\n\n    this.fire(\"visibilityupdate\", {keys: this.options.visibleSites})\n\n  },\n  setVisibleSites: function(keys) {\n    \n    var layer = this;\n    \n    if(Array.isArray(keys) == false) {keys = [keys]}\n  \n    this.eachLayer(function(site) {\n      if(site.keyCheck(keys)) {\n        site._show();\n      } else {\n        site._hide();\n      }\n    })\n    \n    this.fire(\"visibilityupdate\", {keys: this.options.visibleSites})\n    \n  },\n  setSelectedSites: function(keys) {\n    \n    var layer = this;\n    \n    if(Array.isArray(keys) == false) {keys = [keys]}\n  \n    this.eachLayer(function(site) {\n      if(site.keyCheck(keys)) {\n        site._select();\n      } else {\n        site._deselect();\n      }\n    })\n    \n    this.fire(\"selectionupdate\", {keys: this.options.selectedSites})\n    \n  },\n  checkAOI: function() {\n    if(this.options.aoiLayer !== undefined) {\n      this._selectSiteByPolygons(this.options.aoiLayer)\n    }\n  },\n  selectSites: function(obj) {\n    this._selectSiteByPolygons(obj);\n  },\n  _selectSiteByPolygons: function(polygons) {\n    \n    var selSites = [];\n    this.eachLayer(function(site) {\n      if(site.inPolygon(polygons)) {\n        site._select();\n        selSites.push(site.properties.key[0])\n      } else {\n        site._deselect();\n      }\n    })\n    \n    this.options.selectedSites = selSites\n    this.fire(\"selectionupdate\", {keys: this.options.selectedSites})\n    \n  }\n})\n\nL.siteGroup = function(geojson, options) {\n  return new L.SiteGroup(geojson, options);\n}\n\nL.SiteMarker = L.CircleMarker.extend({\n  options: {\n    selected: false,\n    visible: false,\n  },\n  initialize: function(latlng, options, properties, parent) {\n    \n    var defaultOptions = {\n      opacity: 0,\n      fillOpacity: 0,\n      contextmenu: true,\n      contextmenuWidth: 140,\n      contextmenuItems: [\n        {text: \"Select Monitor\", index: 0, callback: function() {this.select()}},\n        {text: \"Hide Monitor\", index: 1, callback: function() {this.hide()}}\n      ]\n    }\n\n    L.extend(defaultOptions, options)\n\n    for(var i = 0; i < defaultOptions.contextmenuItems.length; i++) {\n      defaultOptions.contextmenuItems[i].context = this;\n    }\n\n    L.setOptions(this, defaultOptions);\n    \n    properties.key = Array.isArray(properties.key) == false ? [properties.key] : properties.key;\n    \n    this._latlng = L.latLng(latlng);\n    this._radius = this.options.radius;\n    this.properties = properties;\n    this._parent = parent;\n    \n    if(this._parent.options.aoiLayer !== undefined) {\n      if(this.inPolygon(this._parent.options.aoiLayer)) {\n        this._select();\n      } else {\n        this._deselect();\n      }\n    } else {\n      this._deselect();\n    }    \n    \n    parent.addLayer(this);\n  \n    if(this._parent.options.visibilityTest(this)) {\n      this._show();\n    } else {\n      this._hide();\n    }\n      \n    if(this._parent.options.onEachSite !== undefined) {\n      this._parent.options.onEachSite(this)\n    }\n      \n    return this;\n    \n  },\n  setMarkerStyle: function(style) {\n    this.setStyle(this._parent.options.styles[style]);\n  },\n  select: function() {\n    this._select();\n    this._parent.fireEvent(\"siteupdate\", {site: this, updateType: \"select\"})\n  },\n  _select: function(fire) {\n    \n    this.options.selected = true;\n    if(this.options.contextmenu == true) {\n      this.options.contextmenuItems[0].text = \"Deselect Monitor\";\n      this.options.contextmenuItems[0].callback = function() {this.deselect()};\n      if(this._parent.options.correlations == true) {\n        this.options.contextmenuItems[2] = {text: \"Show Correlation\", callback: this.correlate, context: this}\n      } else {\n        this.options.contextmenuItems[2] = null;\n      }\n    }\n    if(this.keyCheck(this._parent.options.selectedSites) == false) {\n      this._parent.options.selectedSites = this._parent.options.selectedSites.concat(this.properties.key)\n    }\n    this.setMarkerStyle(\"selected\");\n    \n  },\n  correlate: function() {\n    this.options.contextmenuItems[2] = {text: \"Hide Correlation\", callback: this.decorrelate, context: this};\n    this._parent.fireEvent(\"correlate\", {site: this});\n  },\n  decorrelate: function() {\n      this._parent.fireEvent(\"decorrelate\", {site: this});\n  },\n  deselect: function() {\n    this._deselect();\n    this._parent.fireEvent(\"siteupdate\", {site: this, updateType: \"deselect\"})\n  },\n  _deselect: function() {\n    this.options.selected = false;\n    if(this.options.contextmenu == true) {\n      this.options.contextmenuItems[0].text = \"Select Monitor\";\n      this.options.contextmenuItems[0].callback = function() {this.select()};\n      this.options.contextmenuItems[2] = null;\n    }\n    if(this.keyCheck(this._parent.options.selectedSites)) {\n      for(var i = 0; i < this.properties.key.length; i++) {\n        var n = this._parent.options.selectedSites.indexOf(this.properties.key[i]);\n        if(n != -1) {\n          this._parent.options.selectedSites.splice(n, 1);\n        }\n      }\n    }\n    this.setMarkerStyle(\"unselected\");\n  },\n  show: function() {\n    this._show();\n    this._parent.fireEvent(\"siteupdate\", {site: this, updateType: \"show\"});\n  },\n  _show: function() {\n    this.options.visible = true;\n    if(this.keyCheck(this._parent.options.visibleSites) == false) {\n      this._parent.options.visibleSites = this._parent.options.visibleSites.concat(this.properties.key)\n    }\n    if(this._parent.options.correlations == true && this.options.contextmenu == true && this.options.selected == true) {\n      this.options.contextmenuItems[2] = {text: \"Show Correlation\", callback: this.correlate, context: this}\n    } else {\n      this.options.contextmenuItems[2] = null;\n    }\n    this._container.children[0].style.display = \"block\";\n  },\n  hide: function() {\n    this._hide();\n    this._parent.fireEvent(\"siteupdate\", {site: this, updateType: \"hide\"})\n  },\n  _hide: function() {\n    this.options.visible = false;\n    if(this.keyCheck(this._parent.options.visibleSites)) {\n      for(var i = 0; i < this.properties.key.length; i++) {\n        var n = this._parent.options.visibleSites.indexOf(this.properties.key[i]);\n        if(n != -1) {\n          this._parent.options.visibleSites.splice(n, 1);\n        }\n      }\n    }\n    if(this.options.contextmenu == true) {\n      this.options.contextmenuItems[2] = null;\n    }\n    this._container.children[0].style.display = \"none\";\n  },\n  inPolygon: function(polygons, pip) {\n    \n    if(polygons === undefined) return false;\n    \n    var t = this;\n    if(pip === undefined) pip = false;\n    var point = this._latlng;\n    \n    if(!pip) {\n      polygons.eachLayer(function(polygon) {\n      \n        var coords = polygon._latlngs;\n\n        if(coords !== undefined) {\n\n          var j = coords.length - 1\n          var inside = false;\n     \n          for(var i = 0; i < coords.length; i++) {\n      \t\t  if(((coords[i].lat > point.lat) != (coords[j].lat > point.lat)) &&\n      \t\t\t  (point.lng < (coords[j].lng - coords[i].lng) * (point.lat - coords[i].lat) / (coords[j].lat - coords[i].lat) + coords[i].lng)) {\n      \t\t\t  inside = !inside;\n      \t\t\t}\n      \t\t\n      \t\t  j = i;\n      \t  }\n          \n          if(inside) {pip = true};\n      \n        } else {\n          if(t.inPolygon(polygon, pip)) {pip = true;}\n        }\n      \n      })\n    \n    }\n    \n    return pip;\n    \n  },\n  keyCheck: function(keys) {\n    keys = Array.isArray(keys) == false ? [keys]: keys;\n    var myKey = this.properties.key;\n    var inc = false;\n    myKey = Array.isArray(myKey) == false ? [myKey]: myKey;\n    for(var i = 0; i < myKey.length; i++) {\n      if(keys.indexOf(myKey[i]) != -1) {\n        inc = true;\n        break;\n      }\n    }\n    return inc;\n  }\n  \n})\n\nL.siteMarker = function(latlng, options, properties, parent) {\n  return new L.SiteMarker(latlng, options, properties, parent)\n}",
    "created" : 1426271641963.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "1040238804",
    "id" : "E3CC8DC",
    "lastKnownWriteTime" : 1426271550,
    "path" : "C:/R/NetAssessApp/www/js/netassess-leaflet.js",
    "project_path" : "www/js/netassess-leaflet.js",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "js"
}