{
    "contents" : "\t// Temporary function for non-implemented buttons/placeholders\n\tfunction notImp() {\n\t\talert(\"This feature is not yet implemented.\")\n\t}\n\n// Create the global netAssess Object\nvar netAssess = {\n\tdata: {\n\t\tnewSiteCounter: 90001,\n\t\tus_bounds: L.latLngBounds([24.4, -124.8], [49.4, -66.9]),\n\t\tus_center: L.latLng([39.8333, -98.5833]),\n\t},\n\tloading: {\n\t\tshow: function() {\n\t\t\t$(\"div.loading\").removeClass(\"hidden\");\n\t\t},\n\t\thide: function() {\n\t\t\t$(\"div.loading\").addClass(\"hidden\");\n\t\t}\n\t},\n\ticons: {\n\t\texistingSite: L.divIcon({className: 'site-icon hidden'}),\n\t\tnewSite: L.divIcon({className: 'new-site-icon'}),\n\t\tsiteSelector: L.divIcon({className: 'fa fa-crosshairs new-site-selector'})\n\t},\n\tbasemaps: {\n\t\t\"Gray\": L.layerGroup([L.esri.basemapLayer(\"Gray\"), L.esri.basemapLayer(\"GrayLabels\")]),\n\t\t\"Street\": L.esri.basemapLayer(\"Streets\"),\n\t\t\"Satellite\" : L.esri.basemapLayer(\"Imagery\"),\n\t\t\"Satellite - Labelled\": L.layerGroup([L.esri.basemapLayer(\"Imagery\"), L.esri.basemapLayer(\"ImageryLabels\")])\n\t},\n\toverlays: {\n\t\to3: L.imageOverlay(\"images/o3_75.png\", [[24.51748, -124.76255], [49.38436, -66.92599]], {opacity: 0.65}),\n\t\tpm25: L.imageOverlay(\"images/pm25_35.png\", [[24.51748, -124.76255], [49.38436, -66.92599]], {opacity: 0.65})\n\t},\n\tcontrols: {\n\t\tsidebars: {\n\t\t\tsettings: L.control.sidebar('settings-sb', {position: 'right', autoPan: false}),\n\t\t\thelp:  L.control.sidebar('help-sb', {position: 'right', autoPan: false}),\n\t\t\tabout: L.control.sidebar('about-sb', {position: 'right', autoPan: false})\n\t\t}\n\t},\n\tfloaters: {\n\t\tcormat: new $.floater(\"#cormat\", {title: \"Correlation Matrix\", width: \"800px\", height: \"640px;\", top: \"80px\", resize: true, left: \"80px\"}),\n\t\tareaServed: new $.floater(\"#areainfo\", {title: \"Area Served Information\", top: \"50px\", right: \"50px\"}),\n\t\taoi: new $.floater(\"#aoi\", {title: \"Area of Interest\"}),\n\t\tlegend: new $.floater(\"#legend\", {title: \"Legend\", close: false, width: '400px', height: \"250px\", right: \"50px\", bottom: \"50px\"}),\n\t\tnewSite: new $.floater(\"#new_site\", {title: \"Add New Site\", width: '400px', close: false, minimize: false}),\n    popup: new $.floater(\"#popup\", {title: \"Popup\", width: \"600px\", left: \"200px\", minimize: false})\n  },\n\tresizeMap: function() {\n\t\tdocument.getElementById(\"map\").style.width = window.innerWidth + \"px\";\n\t\tdocument.getElementById(\"map\").style.height = (window.innerHeight - 40) + \"px\";\n\t}\n};\n\nnetAssess.resizeMap();\n\nnetAssess.layerGroups = {\n\tnewSiteSelection: L.layerGroup(),\n\tareaServed: L.featureGroup(null),\n\taoi: L.featureGroup(),\n\tsites: L.geoJson(null, {\n\t\tpointToLayer: function(feature, latlon) {\n//\t\t\tvar mark = new L.marker(latlon, {contextmenu: true, icon: netAssess.icons.existingSite});\n      var mark = new netAssess.sitesLayer(latlon, {contextmenu: true, icon: netAssess.icons.existingSite});\n\t\t\tmark.options.contextmenuItems = [\n\t\t\t\t{text: \"Select Monitor\", index: 0, callback: function() {this.select()}, context: mark},\n\t\t\t\t{text: \"Hide Monitor\", index: 1, callback: function() {this.hide()}, context: mark},\n\t\t\t\t{separator: true, index: 2},\n        {text: \"View Correlations\", index: 3, callback: netAssess.errorChecking.corMap, context: mark},\n        {text: \"Hide Correlations\", index: 4, callback: function() {netAssess.layerGroups.correlations.clearLayers()}}\n\t\t\t];\n\t\t\treturn mark;\n\t\t},\n\t\tonEachFeature: function(feature, layer) {\n \n      po = \"<span class = 'popup-text'><h4 class = 'header'>Site Information</h4>\"\n      po = po + \"<center><table class = 'popup-table'><tr>\"\n      \n    \tpo = po + \"<td>Site ID(s)</td><td>\"\n    \tfor(si in feature.properties.site_id) {\n    \t  po = po + feature.properties.site_id[si] + \"<br />\"\n    \t}\n      po = po + \"</td></tr>\"\n      \n      po = po + \"<tr><td>Street Address</td>\"\n    \tpo = po + \"<td>\" + feature.properties.Street_Address + \"</td></tr>\"\n      po = po + \"<tr><td colspan = 2 style = 'text-align: center; padding-top: 5px; border-right: none;'>Parameter Counts</td></tr>\"\n      po = po + \"<tr><td>Total</td><td>\" + feature.properties.Count + \"</td></tr>\"\n    \tpo = po + \"<tr><td>Criteria:</td><td>\" + feature.properties.Crit_Count + \"</td></tr>\"\n    \tpo = po + \"<tr><td>HAPS:</td><td>\" + feature.properties.HAP_Count + \"</td></tr>\"\n    \tpo = po + \"<tr><td>Met:</td><td>\" + feature.properties.Met_Count + \"</td></tr>\"\n      po = po + \"<tr><td colspan = 2 style = 'text-align: center; padding-top: 5px; border-right: none;'>Design Value Trends</td></tr>\"\n      po = po + \"<tr><td colspan = 2 style = 'text-align: center; border-right: none;'><div class = 'popup-trend'><img /></div></center></td></tr>\"\n      po = po + \"</table>\"\n    \tpo = po + \"</span>\"\n    \n    \tlayer.bindPopup(po, {minWidth: 150});\n    \tlayer.on(\"click\", function(el) {\n    \t\t$(\"#monitorSelect\").data(\"monitor\", this.feature.properties.key)\n    \t\t$(\"#map\").trigger(\"monitorSelect\")\n    \t})\n      \n    }\n\t}),\n\tnewSites: L.geoJson(null, {\n\t\tpointToLayer: function(feature, latlon) {\n\t\t\tvar mark = new netAssess.sitesLayer(latlon, {contextmenu: true, icon: netAssess.icons.newSite});\n\t\t\tmark.options.contextmenuItems = [\n\t\t\t\t{text: \"Select Monitor\", index: 0, callback: function() {this.select()}, context: mark},\n\t\t\t\t{text: \"Hide Monitor\", index: 1, callback: function() {this.hide()}, context: mark},\n\t\t\t\t{separator: true, index: 2}\n\t\t\t];\n\t\t\treturn mark;\n\t\t},\n\t\tonEachFeature: function(feature, layer) {\n\n      po = \"<span class = 'popup-text'><h4 class = 'header'>New Site Information</h4>\"\n      po = po + \"<center><table class = 'popup-table'><tr>\"\n      \n      po = po + \"<td>Site ID</td><td>\" + feature.properties.Name + \"</td></tr>\"\n      po = po + \"<tr><td>County</td><td>\" + feature.properties.County + \"</td></tr>\"\n      po = po + \"<tr><td>State</td><td>\" + feature.properties.State + \"</td></tr>\"\n\n      po = po + \"<tr><td>Parameters</td><td>\"\n      for(var i = 0; i < feature.properties.Params.length; i++) {\n        po = po + feature.properties.Params[i] + \"<br />\"\n      }\n      po = po + \"</td></tr>\"\n\n      po = po + \"</table></span>\"\n  \n    \tlayer.bindPopup(po, {minWidth: 150});\n\n    }\n\t}),\n  correlations: L.featureGroup(null)\n}\n\nnetAssess.mapControls = {\n\tfullExtent: function() {\n\t\tnetAssess.map.fitBounds(netAssess.data.us_bounds);\n\t}\n}\n\n// Create the map\nnetAssess.map = L.map('map', {\n\tcontextmenu: true, \n\tcontextmenuWidth: 140, \n\tcontextmenuItems: [\n\t\t{text: \"Full Extent\", iconCls: \"fa fa-search-minus\", callback: netAssess.mapControls.fullExtent},\n\t\t{text: \"Area of Interest\", iconCls: \"fa fa-crosshairs\", callback: netAssess.floaters.aoi.open}\n\t],\n\tdrawControl: false, \n\tzoomControl: false,\n\tmaxZoom: 12, \n\tminZoom: 3\n}).fitBounds(L.latLngBounds([24.4, -124.8], [49.4, -66.9]));\n  \nnetAssess.draw = {\n\tpolygon: new L.Draw.Polygon(netAssess.map, {allowInterSection: false, showArea: false, drawError: {color: '#b00b00', timeout: 1000}, shapeOptions: {color: '#0033ff'}}),\n\trectangle: new L.Draw.Rectangle(netAssess.map, {shapeOptions: {color: '#0033ff'}}),\n\tnew_site: new L.Draw.Marker(netAssess.map, {icon: netAssess.icons.siteSelector})\n}\n\n// Tests visible monitoring locations to see if they fall with the defined\n// area of interests. Sets properties accordingly and then updates sites layer\nnetAssess.setAOI = function(e) {  \n\n\t// Hack to handle both polygon and multipolygon layers\n\tif(e.hasOwnProperty(\"layer\")) {\n\t\tvar l = e.layer;\n\t\tvar t = e.layerType;\n\t} else {\n\t\tvar l = e;\n\t\tvar t = \"polygon\";\n\t}\n\n\tnetAssess.layerGroups.areaServed.clearLayers();\n\tnetAssess.layerGroups.aoi.clearLayers();\n\tnetAssess.layerGroups.aoi.addLayer(l);\n\n\tnetAssess.layerGroups.aoi.on(\"click\", function(l) {\n\t\tnetAssess.map.fitBounds(l.layer.getBounds());\n\t})\n\n\tif(t == \"polygon\" || t == \"rectangle\") {\n\t\tnetAssess.layerGroups.sites.eachLayer(netAssess.checkPolygon, l);\n\t\tnetAssess.layerGroups.newSites.eachLayer(netAssess.checkPolygon, l);\n\t} else {\n\t\talert(\"Unknown Input to checkAOI function\")\n\t}\n\n\tnetAssess.displaySites();\n\n\tvar aoiPolygons = {};\n\n\tnetAssess.layerGroups.aoi.eachLayer(function(layer) {\n\t\tvar ll = layer.getLatLngs();\n\t\taoiPolygons[layer._leaflet_id] = ll;\n\t})\n\n\t$(\"#areaOfInterest\").data(\"aoi\", aoiPolygons);\n\n\t$(\"#map\")\n\t\t.trigger(\"siteSelection\")\n\t\t.trigger(\"aoiChange\")\n\t\t.trigger(\"newSiteUpdate\");\n\n}\n\nnetAssess.checkPolygon = function(x) {\n\n\tvar inside = false;\n\n\tif(this.hasOwnProperty(\"_layers\")) {\n\t\tthis.eachLayer(function(layer) {\n\t\t\tif(netAssess.pip(x._latlng, layer)) {inside = true}\n\t\t})\n\t} else {\n\t\tinside = netAssess.pip(x._latlng, this);\n\t}\n\n\tif(inside) {\n\t\t$(x._icon).addClass(\"selected\");\n\t\tx.feature.properties.selected = true;\n\t} else {\n\t\t$(x._icon).removeClass(\"selected\");\n\t\tx.feature.properties.selected = false;\n\t}\n\n}\n\n// Function to test if point falls within a polygon\n// Converted from http://www.ecse.rpi.edu/Homepages/wrf/Research/Short_Notes/pnpoly.html\nnetAssess.pip = function(point, polygon) {\n\n\tvar coords = polygon._latlngs;\n\tvar inside = false;\n\tvar j = coords.length - 1\n\n\tfor(var i = 0; i < coords.length; i++) {\n\t\tif(((coords[i].lat > point.lat) != (coords[j].lat > point.lat)) &&\n\t\t\t(point.lng < (coords[j].lng - coords[i].lng) * (point.lat - coords[i].lat) / (coords[j].lat - coords[i].lat) + coords[i].lng)) {\n\t\t\t\tinside = !inside;\n\t\t\t}\n\t\t\n\t\tj = i;\n\t}\n\n\treturn inside;\n\n\t}\n  \n// A 'bridge' function that lets the setAOI function work with the predefined\n// area polygons (state, cbsa, csa). Called by a shiny custom message handler.\nnetAssess.setPredefinedArea = function(data) {\n\n\tif(data.coords.length == 1) {\n\t\tvar x = L.polygon(data.coords[0]);\n\t} else if(data.coords.length > 1) {\n\t\tvar x = L.multiPolygon(data.coords);\n\t}\n\n\tnetAssess.disableDrawing();\n\tnetAssess.setAOI(x);\n\n}\n\n// Function called by a shiny custom message handler when the selected\n// parameter changes. Takes a list of monitor ids from the server and changes \n// their visible status to true, sets all sites layers to visible properties\n// to false.\nnetAssess.updateVisibleMonitors = function(data) {\n\n\tvar sites = netAssess.layerGroups.sites;\n\tvar newSites = netAssess.layerGroups.newSites;\n\t\n\tif(!$.isArray(data)) {\n\t\tdata = [data];\n\t}\n\t\n\tfor(var key in sites._layers) {\n\t  if(sites._layers.hasOwnProperty(key)) {\n\t\tvar el = sites._layers[key].feature;\n\t\tvar inc = false;\n\t\tfor(var i = 0; i < el.properties.key.length; i++) {\n\t\t\tvar val = el.properties.key[i]\n\t\t\tif(data.indexOf(val) != -1) {inc = true;}\n\t\t}\n\t\tel.properties.visible = inc;\n\t  }\n\t}\n\t\n\tnewSites.eachLayer(function(layer) {\n\t\tlayer.feature.properties.visible = layer.feature.properties.Params.indexOf($(\"#expParam\").val()) != -1;\n\t})\n\t\n\tnetAssess.layerGroups.areaServed.clearLayers()\n\tnetAssess.displaySites();\n\n\t$(\"#map\")\n\t\t.trigger(\"siteSelection\")\n\t\t.trigger(\"newSiteUpdate\")\n\t\t.trigger(\"siteUpdate\");\n\n\tnetAssess.loading.hide();\n\n  }\n\n\n  // Cycles through the sites layer updating the sites based on their 'visible'\n  // and 'selected' properties\nnetAssess.displaySites = function() {\n\n\tnetAssess.layerGroups.sites.eachLayer(netAssess.siteCheck);\n\tnetAssess.layerGroups.newSites.eachLayer(netAssess.siteCheck);\n  \n}\n  \nnetAssess.siteCheck = function(layer) {\n\n\tif(layer.feature.properties.visible == false) {\n\t\t$(layer._icon).addClass(\"hidden\");\n\t} else {\n\t\t$(layer._icon).removeClass(\"hidden\");\n\t\tif(layer.feature.properties.selected == false) {\n\t\t\t$(layer._icon).removeClass(\"selected\");\n\t\t} else {\n\t\t\t$(layer._icon).addClass(\"selected\");\n\t\t}\n\t}\n\n}\n\n// Function that adds the popups to the site icons and adds event triggers for \n// shiny inputs\n// netAssess.initializeNewSite = \n    \n/* Call by a shiny custom message handler. Displays provided area served data */  \nnetAssess.updateAreaServed = function(data) {\n\n\tvar areaServed = netAssess.layerGroups.areaServed;\n\n\tareaServed.clearLayers()\n\n\tvar areaSelectStyle = {fillColor: '#666', weight: 2, opacity: 0.75, color: 'white', dashArray: '3', fillOpacity: 0.4}\n\n\tfor(var i = 0; i < data.length; i++) {\n\n\t\tif(data[i].coords.length == 1) {\n\t\t\tvar a = L.polygon(data[i].coords[0], {id: data[i].id}).addTo(areaServed)\n\t\t} else {\n\t\t\tvar a = L.multiPolygon([data[i].coords], {id: data[i].id}).addTo(areaServed)\n\t\t}\n\n\t\ta.setStyle(areaSelectStyle)\n\t\t\t.on(\"mouseover\", function(e) {\n\t\t\t\tvar layer = e.target;\n\t\t\t\tlayer.setStyle({\n\t\t\t\t\tweight: 5,\n\t\t\t\t\tcolor: '#666',\n\t\t\t\t\tdashArray: '',\n\t\t\t\t\tfillOpacity: 0.7\n\t\t\t\t});\n\t\t\t\tif(!L.Browser.id && !L.Browser.opera) {\n\t\t\t\t\tlayer.bringToFront();\n\t\t\t\t}\n\t\t\t})\n\t\t\t.on(\"mouseout\", function(e) {\n\t\t\t\te.target.setStyle(areaSelectStyle);\n\t\t\t})\n\t\t\t.on(\"click\", function(e) {\n\t\t\t\tvar layer = e.target;\n\t\t\t\tif(layer.hasOwnProperty(\"options\")) {\n\t\t\t\t\t$(\"#clickedAreaServed\").data(\"clicked\", layer.options.id)\n\t\t\t\t} else if(layer.hasOwnProperty(\"_options\")) {\n\t\t\t\t\t$(\"#clickedAreaServed\").data(\"clicked\", layer._options.id)\n\t\t\t\t}\n        var $param = $(\"#expParam\").val();\n        var $thresh = $(\"#areaServedThreshold\");\n        if($param == \"44201\") {\n          $thresh.html(\"(\" + $(\"#ozoneNAAQS\").val() + \")\");\n        } else if([\"88101\", \"88502\"].indexOf($param) != -1) {\n          $thresh.html(\"(35&mu;g/m<sup>3</sup>)\");\n        } else {\n          $thresh.html(\"\");\n        }\n        netAssess.floaters.areaServed.open();\n\t\t\t\t$(\"#map\").trigger(\"areaClick\")\n\t\t\t})\n\t}\n  \n\tnetAssess.loading.hide();\n\n}\n\n/* Miscellaneous Functions */\n\n// Function that resets the predefined area. Used mainly on page reload to \n// prevent the predefined area displaying by default.\nnetAssess.resetPredefinedAreaSelect = function() {\n\t$('input[name=areaSelect]').attr('checked', false);\n\tdocument.getElementById('areaSelectSelect').selectedIndex = -1;\n}\n\n\n// Reset the App\nnetAssess.reset = function() {\n\tnetAssess.loading.show();\n\tnetAssess.resetPredefinedAreaSelect();\n\t$(\"#expParam\").select2(\"val\", \"-1\")\n\t$(\"#expParam\").trigger(\"change\");\n\tnetAssess.layerGroups.aoi.clearLayers();\n\tnetAssess.layerGroups.areaServed.clearLayers();\n\tnetAssess.floaters.aoi.close();\n\tnetAssess.floaters.areaServed.close();\n\tnetAssess.floaters.cormat.close();\n\tnetAssess.mapControls.fullExtent();\n\tnetAssess.loading.hide();\n\t$(\"input[name='areaServedClipping'][value='border']\").prop(\"checked\", true);\n\t$(\"#areaServedClipping\").trigger('change.radioInputBinding');\n\tnetAssess.layerGroups.sites.eachLayer(function(layer) {\n\t\tlayer.feature.properties.visible = false;\n\t\tlayer.feature.properties.selected = false;\n\t});\n\tnetAssess.layerGroups.newSites.clearLayers();\n}\n  \n  // Functions for changing the state of monitoring locations\n  \nnetAssess.toggleSelected = function() {\n  var sel = !this.feature.properties.selected;\n\tthis.feature.properties.selected = sel;\n  if(sel) {\n    this.options.contextmenuItems[0].text = \"Deselect Monitor\"\n  } else {\n    this.options.contextmenuItems[0].text = \"Select Monitor\"\n  }\n\t$(this._icon).toggleClass(\"selected\", this.feature.properties.selected);\n\t$(\"#map\")\n\t\t.trigger(\"siteSelection\")\n\t\t.trigger(\"newSiteUpdate\");\n}\n\nnetAssess.hideMonitor = function() {\n\tthis.feature.properties.visible = false;\n\tthis.feature.properties.selected = false;\n\t$(this._icon).addClass(\"hidden\");\n\t$(\"#map\")\n\t\t.trigger(\"siteSelection\")\n\t\t.trigger(\"siteUpdate\")\n\t\t.trigger(\"newSiteUpdate\");\n}\n\n// Toggles the provided sidebar panel, and makes sure all others are closed.\nnetAssess.toggleSidebars = function(sb) {\n\tvar sidebars = netAssess.controls.sidebars;\n\tfor(var x in sidebars) {\n\t\tif(sidebars.hasOwnProperty(x)) {\n\t\t\tif(x == sb) {\n\t\t\t\tsidebars[sb].toggle();\n\t\t\t} else {\n\t\t\t\tsidebars[x].hide();\n\t\t\t}\n\t\t}\n\t};\n}\n\n// Turn off any currently active drawing handlers\nnetAssess.disableDrawing = function() {\n\tnetAssess.draw.polygon.disable();\n\tnetAssess.draw.rectangle.disable();\n}\n\n// Function to update and show the alert box\nnetAssess.showAlert = function(heading, body) {\n\t$(\"#alert-heading\").html(heading);\n\t$(\"#alert-body\").html(body);\n\t$(\"#alert\").addClass(\"alert-open\");\n}\n  \n/* Functions to do error checking on inputs before sending data to shiny server */\n\nnetAssess.errorChecking = { \n  basics: function(siteMax, siteMin) {\n\n  \tvar active = true;\n  \tvar body = \"Please correct the following problems:<ul>\";\n    \n  \tif($(\"#expParam\").select2(\"val\") == \"-1\") {\n  \t\tactive = false;\n  \t\tbody = body + \"<li>No parameter selected</li>\"\n  \t}\n    \n  \tvar ss = 0;\n    \n  \tnetAssess.layerGroups.sites.eachLayer(function(layer, feature) {\n  \t\tif(layer.feature.properties.selected && layer.feature.properties.visible) {\n  \t\t\tss++;\n  \t\t}\n  \t})   \n    \n  \tif(ss == 0) {\n  \t\tactive = false;\n  \t\tbody = body + \"<li>No monitors selected</li>\";\n  \t} else if(ss < siteMin && siteMin != 1) {\n  \t\tactive = false;\n  \t\tbody = body + \"<li>Too few monitors selected</li>\";\n  \t} else if(ss > siteMax) {\n  \t\tactive = false;\n  \t\tbody = body + \"<li>Too many monitors selected</li>\";\n  \t}\n    \n    return {active: active, body: body};\n  \n  },\n  areaServed: function(event) {\n\n  \tevent.stopPropagation();\n  \tvar bc = netAssess.errorChecking.basics(300, 1);\n  \n  \tif(bc.active) {\n  \t\tnetAssess.loading.show();\n      netAssess.closeFloaters();\n  \t\t$(\"#areaServedCalcButton\").trigger(event);\n  \t} else {\n  \t\tbc.body = bc.body + \"</ul>\";\n  \t\tnetAssess.showAlert(\"Area Served Error\", bc.body)\n  \t}\n  \n  },\n\n  corMat:  function(event) {\n    \n  \tvar bc = netAssess.errorChecking.basics(30, 3);\n  \n  \tvar param = $(\"#expParam\").select2(\"val\");\n  \tvar vp = [\"44201\", \"88101\", \"88502\"];\n  \tif(vp.indexOf(param) == -1) {\n  \t\tbc.active = false;\n  \t\tbc.body = bc.body + \"<li>Correlation matrices are only available for parameter codes 44201, 88101, and 88502.</li>\"\n  \t}\n    \n  \tif(bc.active) {\n  \t\tnetAssess.floaters.cormat.open()\n  \t} else {\n  \t\tbc.body = bc.body + \"</ul>\";\n  \t\tnetAssess.showAlert(\"Correlation Matrix Error\", bc.body)\n  \t}\n  \t\n  },\n  checkReport: function(event) {\n    var active = true;\n    var bc = netAssess.errorChecking.basics(30000, 1); \n  \t\n    if(!bc.active) {\n      active = false;\n      bc.body = bc.body + \"</ul>\";\n      netAssess.showAlert(\"Data Download Error\", bc.body)\n    } /*else {\n      if(Object.keys(netAssess.layerGroups.areaServed._layers).length == 0) {\n        bc.body = bc.body + \"<li>Area Served must be run before downloading data.</li></ul>\"\n        netAssess.showAlert(\"Data Download Error\", bc.body)\n        active = false;\n    \t}\n    }*/\n    \n    if(active) {\n  \t\t$(\"#downloadData\").trigger(event);\n  \t}\n  },\n  corMap: function(event){\n    \n    if(this.feature.properties.selected == false) {\n      this.feature.properties.selected == true;\n      $(this._icon).toggleClass(\"selected\", this.feature.properties.selected);\n    \t$(\"#map\")\n\t\t    .trigger(\"siteSelection\")\n\t\t    .trigger(\"newSiteUpdate\");\n\n    }\n    \n    var bc = netAssess.errorChecking.basics(30, 3);\n  \n  \tvar param = $(\"#expParam\").select2(\"val\");\n  \tvar vp = [\"44201\", \"88101\", \"88502\"];\n  \tif(vp.indexOf(param) == -1) {\n  \t\tbc.active = false;\n  \t\tbc.body = bc.body + \"<li>Correlation maps are only available for parameter codes 44201, 88101, and 88502.</li>\"\n  \t}\n    \n  \tif(bc.active) {\n      $(\"#correlations\").trigger(\"viewCor\", this)\n  \t} else {\n  \t\tbc.body = bc.body + \"</ul>\";\n  \t\tnetAssess.showAlert(\"Correlation Map Error\", bc.body)\n  \t}\n\n  }\n}\n\nnetAssess.populateNewSiteData = function(event) {\n  \n\tevent.layer.addTo(netAssess.layerGroups.newSiteSelection);\n  \n\t$(\"#ns_lat\").val(Math.round(event.layer._latlng.lat * 10000) / 10000);\n\t$(\"#ns_lng\").val(Math.round(event.layer._latlng.lng * 10000) / 10000);\n  \n\tvar lat = event.layer._latlng.lat;\n\tvar lng = event.layer._latlng.lng;\n\tvar url = \"https://data.fcc.gov/api/block/find?latitude=\" + lat + \"&longitude=\" + lng + \"&showall=false&format=jsonp&callback=?\"\n\t$.getJSON(url, function(wd) {\n    \n\t\t$(\"#ns_state\").val(wd.State.name);\n\t\t$(\"#ns_county\").val(wd.County.name);\n    $(\"#ns_census\").val(wd.Block.FIPS.substring(0,11));\n\t\tnetAssess.floaters.newSite.open();\n\n\t})\n\n}\n\nnetAssess.cancelNewSite = function() {\n  netAssess.layerGroups.newSiteSelection.clearLayers();\n  netAssess.floaters.newSite.close();\n}\n\nnetAssess.addNewSite = function() {\n\tnetAssess.layerGroups.newSiteSelection.eachLayer(function(layer) {\n\t\tvar gj = layer.toGeoJSON();\n\t\tvar props = {County: $(\"#ns_county\").val(), State: $(\"#ns_state\").val(), \n\t\t\tName: $(\"#ns_name\").val(), Params: $(\"#new_site_parameters\").val(),\n      Tract: $(\"#ns_census\").val(),\tkey: netAssess.data.newSiteCounter\n\t\t}\n\t\tnetAssess.data.newSiteCounter++\n\t\tprops.selected = false;\n    if(Object.keys(netAssess.layerGroups.aoi._layers) > 0) {\n      netAssess.layerGroups.aoi.eachLayer(function(aoi_layer) {\n        if(aoi_layer.hasOwnProperty(\"_layers\")) {\n          aoi_layer.eachLayer(function(l) {\n            if(netAssess.pip(layer._latlng, l)) {\n              props.selected = true;\n            }\n          })\n        } else {\n          if(netAssess.pip(layer._latlng, aoi_layer)) {\n            props.selected = true;\n          }        \n        }\n      })\n    }\n\t\tprops.visible = props.Params.indexOf($(\"#expParam\").val()) != -1;\n\t\tgj.properties = props;\n\t\tnetAssess.layerGroups.newSites.addData(gj)\n\t\tnetAssess.layerGroups.newSites.eachLayer(netAssess.siteCheck);\n\t})\n\t$(\"#map\").trigger(\"newSiteUpdate\");\n\n\tnetAssess.layerGroups.newSiteSelection.clearLayers();\n\tnetAssess.floaters.newSite.close();\n}\n\nnetAssess.closeFloaters = function() {\n  netAssess.floaters.areaServed.close();\n  netAssess.floaters.popup.close();\n  netAssess.floaters.cormat.close();\n}\n\nnetAssess.corColor = function(cor) {\n    \n  if(cor <= 0.6) {\n    col = \"#00FF00\";\n    bor = \"#008800\";\n  } else if(cor <= 0.7) {\n    col = \"#CCFF00\";\n    bor = \"#44CC00\";\n  } else if(cor <= 0.8) {\n    col = \"#FFFF00\";\n    bor = \"#CCCC00\";\n  } else if(cor <= 0.9) {\n    col = \"#FFCC00\";\n    bor = \"#CC4400\";\n  } else {\n    col = \"#FF0000\";\n    bor = \"#CC0000\";\n  }\n  \n  return {fill: col, border: bor};\n  \n}\n\nnetAssess.sitesLayer = L.Marker.extend({\n  select: function() {\n    $(this._icon).addClass(\"selected\");\n    this.options.contextmenuItems[0].text = \"Deselect Monitor\"\n    this.options.contextmenuItems[0].callback = function() {this.deselect()};\n\t\tthis.feature.properties.selected = true;\n  },\n  deselect: function() {\n    $(this._icon).removeClass(\"selected\");\n    this.options.contextmenuItems[0].text = \"Select Monitor\"\n    this.options.contextmenuItems[0].callback = function() {this.select()};\n    this.feature.properties.selected = false;\n  },\n  show: function() {\n    $(this._icon).removeClass(\"hidden\");\n  },\n  hide: function() {\n    $(this._icon).addClass(\"hidden\");\n    this.deselect();\n  }\n});",
    "created" : 1421338534949.000,
    "dirty" : false,
    "encoding" : "ISO8859-1",
    "folds" : "",
    "hash" : "2902874224",
    "id" : "E755CA2B",
    "lastKnownWriteTime" : 1421337190,
    "path" : "C:/R/NetAssessApp/www/js/netassess-setup2.js",
    "project_path" : "www/js/netassess-setup2.js",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "js"
}